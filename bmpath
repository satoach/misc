#!/bin/bash

BMFILE="${HOME}/bookmark_path.txt"
path=""
linenum=""
query=""
localonly=0
interactive=0

echoB() { echo -e "$(tput bold)$1$(tput sgr0)"; }
function help() ## show help
{
    echoB "USAGE:"
    echo "$0 [-lih] [-q query] command"
    echo ""
    echoB "COMMAND:"
    grep -E '^function [a-zA-Z_-]+ *\( *\) *## .*$$' $0 | cut -d " " -f2- | sort \
        | awk ' \
             BEGIN {FS = "\\( *\\) *##"} \
             {args = ""; breif = ""} \
             match($2, /a:.+b:/) {args = substr($2, RSTART+2, RLENGTH-2-2)} \
             {printf "\033[33m%s\033[36m%s\033[0m\n\t%s\n",\
                       $1, args, substr($2, RSTART+RLENGTH), length($2)-RSTART}'
    echo ""
    echoB "OPTION:"
    echo "-l: use bookmark file only. no use ghq list."
    echo "-q: set query for search"
    echo "-i: interactive mode"
    echo "-h: print help"
    echo ""
}

search()
{
    test ! -n "$path" && path=$(pwd)
    linenum=$(cat ${BMFILE} | grep -n -x ${path} | cut -d ":" -f 1)
}

function add() ## add path to bookmark
{
    test $# -ge 1 && path=$1
    search
    test -n "$linenum" && {
        echo "no added";
        exit 1
    }

    echo $path >> $BMFILE;
    echo "add path: $path"
    exit 0
}

function del() ## remove path from bookmark.
{
    test $# -ge 1 && path=$1
    test $interactive -eq 1 && show

    search
    echo "remove path[$linenum]: $path"
    if [ ! -n "$linenum" ]; then
        sed -e "${linenum}d" $BMFILE
    fi
}

function refresh() ## refresh the bookmark list
{
    uniqlist=$(cat $BMFILE | sort -u)
    echo "$uniqlist" > $BMFILE
}

function show() ## show bookmark list
{
    local cmd="cat $BMFILE"
    test $localonly -eq 0 && cmd=$cmd"; ghq list --full-path"

    local word=""
    test -n "$query" && word="--query $query"

    path=$(eval $cmd | peco $word)
    echo $path
}

main()
{
    while getopts "lip:q:h" flag; do
        case $flag in
            \?) OPT_ERR=1; break;;
            l) localonly=1;;
            q) query="$OPTARG";;
            i) interactive=1;;
            h) help; exit 0;;
        esac
    done

    shift $(($OPTIND - 1))
    test $OPT_ERR && { help; exit 1; }

    case $1 in
        "add" | \
        "del"  | \
        "refresh"  | \
        "show") $1 ${@:2};;
        "") show ;;
        * ) help; exit 1;;
    esac

    exit 0
}

main $@
